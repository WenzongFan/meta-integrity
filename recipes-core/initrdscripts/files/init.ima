#!/bin/sh

# Initramfs script for IMA initialzation
#
# This script is a halper used to load the external
# IMA policy and public keys used to verify the IMA
# signature.
#
# Copyright (c) 2017, Wind River Systems, Inc.
# All rights reserved.
# 
# See "LICENSE" for license terms.
# 
# Author:
#   Lans Zhang <jia.zhang@windriver.com>

# Exit code:
# 0 - IMA initialiazation complete
# 1 - Kernel doesn't support securityfs
# 2 - Kernel doesn't support IMA
# 3 - There is no public key to load
# 4 - There is no IMA policy file defined
# 5 - Unable to load IMA policy file

# If root directory is not specified, the root of
# initramfs assumed.
ROOT_DIR="${1}"

SECURITYFS_DIR="${ROOT_DIR}/sys/kernel/security"

# The policy files are always placed in initramfs
IMA_POLICY=/etc/ima_policy

PUBKEY_LOADED=0
SECURITYFS_MOUNTED=0

function print_critical
{
    printf "\033[1;35m"
    echo "$@"
    printf "\033[0m"
}

function print_error
{
    printf "\033[1;31m"
    echo "$@"
    printf "\033[0m"
}

function print_warning
{
    printf "\033[1;33m"
    echo "$@"
    printf "\033[0m"
}

function print_info
{
    printf "\033[1;32m"
    echo "$@"
    printf "\033[0m"
}

function print_verbose
{
    printf "\033[1;36m"
    echo "$@"
    printf "\033[0m"
}

function trap_handler
{
    local err=$?

    print_verbose "Cleaning up with exit code $err ..."

    if [ $err -ne 0 ]; then
        [ $PUBKEY_LOADED -eq 1 ] && keyctl revoke $keyring_id
    fi

    [ $SECURITYFS_MOUNTED -eq 1 ] &&
        umount "$SECURITYFS_DIR" 2>"${ROOT_DIR}/dev/null"
}

trap "trap_handler $?" SIGINT EXIT

if grep -q "ima_appraise=off" "${ROOT_DIR}/proc/cmdline"; then
    print_info "Skip to load the public key and IMA policy"
    exit 0
fi

if ! grep -q securityfs "${ROOT_DIR}/proc/mounts"; then
   ! mount -t securityfs none "$SECURITYFS_DIR" 2>"${ROOT_DIR}/dev/null" && {
       print_error "Unable to mount securityfs filesystem"
       exit 1
   }
   SECURITYFS_MOUNTED=1
   securityfs_dir="$SECURITYFS_DIR"
else
   securityfs_dirs="$(grep securityfs ${ROOT_DIR}/proc/mounts | awk '{print $2}')"

   # Use the first one.
   for securityfs_dir in "$securityfs_dirs"; do
       break
   done
fi

[ ! -d "$securityfs_dir/ima" ] &&
    print_info "IMA is not enabled. Exiting ..." && exit 2

keyring_id=`keyctl newring _ima @u`

for key in /etc/keys/pubkey_evm*.pem ${ROOT_DIR}/etc/keys/pubkey_evm*.pem; do
    [ ! -s "$key" ] && continue

    if ! evmctl import --rsa "$key" $keyring_id >"${ROOT_DIR}/dev/null"; then
        print_critical "Unable to load the public key $key for IMA appraisal"
    else
        PUBKEY_LOADED=1
        print_verbose "The public key $key loaded for IMA appraisal"
    fi
done

[ $PUBKEY_LOADED -ne 1 ] && {
    print_warning "No public key loaded"
    exit 3
}

# Attempt to load the default policy.
[ ! -f "${IMA_POLICY}" ] && IMA_POLICY="${IMA_POLICY}.default"

[ ! -f "${IMA_POLICY}" ] && {
    print_warning "No IMA policy file defined"
    exit 4
}

cat "${IMA_POLICY}" > "$securityfs_dir/ima/policy" && {
    exit 0
} || {
    print_critical "Unable to load the IMA policy ${IMA_POLICY}"
    exit 5
}
